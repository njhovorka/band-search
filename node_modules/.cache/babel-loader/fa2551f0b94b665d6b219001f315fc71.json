{"ast":null,"code":"var _jsxFileName = \"/Users/nikolihovorka/band-search/src/SearchPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport SearchBar from './SearchBar';\nimport Artists from './Artists';\nimport bands from './fake_band_names_mit.txt';\nimport logo from './logo.png'; // npm library to employ Dice's Coefficient: https://www.npmjs.com/package/string-similarity\n\nimport stringSimilarity from 'string-similarity'; // App architecture via SearchPage, Artists, and SearchBar Components\n// inspired by an article from Praditiya Adhitana:\n// https://medium.com/@pradityadhitama/simple-search-bar-component-functionality-in-react-6589fda3385d\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SearchPage = props => {\n  _s();\n\n  const [input, setInput] = useState('');\n  const [artistsDefault, setArtistsDefault] = useState();\n  const [artists, setArtists] = useState(); // fetch band names from local file\n\n  const fetchData = async () => {\n    return await fetch(bands).then(r => r.text()).then(text => {\n      const artists = text.split('\\n');\n      setArtists('');\n      setArtistsDefault(artists);\n    });\n  }; // POST function, update list of artists to display based on query\n\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    fetch('/api/query', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query: input\n      })\n    }).then(response => {\n      const rankedArtists = response.json().then(data => ({\n        data: data\n      })).then(res => {\n        console.log(res[0]);\n      });\n    });\n    const filteredArtists = searchArtists(input);\n    setArtists(filteredArtists);\n  }; // update content in search box.\n\n\n  const updateInput = async input => {\n    setInput(input);\n  }; // modified from 'findBestMatch' function from string-similarity npm library (see above)\n\n\n  function findBestMatches(mainString, targetStrings) {\n    const ratings = [];\n    let bestMatchIndex = 0;\n\n    for (let i = 0; i < targetStrings.length; i++) {\n      const currentTargetString = targetStrings[i];\n      var currentRating = stringSimilarity.compareTwoStrings(mainString.toLowerCase(), currentTargetString.toLowerCase()); // Additional scoring for matching first characters of band name (more accurate results for short queries)\n\n      if (mainString.toLowerCase() === currentTargetString.toLowerCase().substring(0, mainString.length)) {\n        currentRating += mainString.length / 5;\n      }\n\n      ratings.push({\n        target: currentTargetString,\n        rating: currentRating\n      });\n\n      if (currentRating > ratings[bestMatchIndex].rating) {\n        bestMatchIndex = i;\n      }\n    }\n\n    const bestMatch = ratings[bestMatchIndex];\n    return {\n      ratings: ratings,\n      bestMatch: bestMatch,\n      bestMatchIndex: bestMatchIndex\n    };\n  } // the main algorithm for searching, ranking relevant artist names.\\\n\n\n  function searchArtists(query) {\n    var rankedArtists = [];\n    let artists = artistsDefault.map(x => x);\n    var similarity;\n\n    for (var i = 0; i < 10; i++) {\n      similarity = findBestMatches(query, artists);\n      rankedArtists[i] = similarity.bestMatch.target;\n      artists.splice(similarity.bestMatchIndex, 1);\n    }\n\n    return rankedArtists;\n  }\n\n  ;\n  useEffect(() => {\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"https://fan.booster.musicfox.io\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"musicfox logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        fontSize: 25,\n        fontFamily: 'system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji'\n      },\n      children: \"Our Bands\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      input: input,\n      onChange: updateInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: handleSubmit,\n      style: {\n        height: 31,\n        backgroundColor: 'black',\n        borderColor: 'black',\n        borderRadius: 4,\n        outlineColor: '#D1D1D1',\n        fontWeight: 'bold',\n        fontFamily: 'system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji',\n        color: 'white'\n      },\n      children: \"SEARCH\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }, this), artists !== '' ? /*#__PURE__*/_jsxDEV(Artists, {\n      artists: artists\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 24\n    }, this) : null]\n  }, void 0, true);\n};\n\n_s(SearchPage, \"ABZUKgUo4FFJezseGKNIC5nd3bQ=\");\n\n_c = SearchPage;\nexport default SearchPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchPage\");","map":{"version":3,"sources":["/Users/nikolihovorka/band-search/src/SearchPage.js"],"names":["React","useState","useEffect","SearchBar","Artists","bands","logo","stringSimilarity","SearchPage","props","input","setInput","artistsDefault","setArtistsDefault","artists","setArtists","fetchData","fetch","then","r","text","split","handleSubmit","e","preventDefault","method","headers","body","JSON","stringify","query","response","rankedArtists","json","data","res","console","log","filteredArtists","searchArtists","updateInput","findBestMatches","mainString","targetStrings","ratings","bestMatchIndex","i","length","currentTargetString","currentRating","compareTwoStrings","toLowerCase","substring","push","target","rating","bestMatch","map","x","similarity","splice","fontSize","fontFamily","height","backgroundColor","borderColor","borderRadius","outlineColor","fontWeight","color"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport SearchBar from './SearchBar';\nimport Artists from './Artists';\nimport bands from './fake_band_names_mit.txt';\nimport logo from './logo.png'\n\n// npm library to employ Dice's Coefficient: https://www.npmjs.com/package/string-similarity\nimport stringSimilarity from 'string-similarity';\n\n// App architecture via SearchPage, Artists, and SearchBar Components\n// inspired by an article from Praditiya Adhitana:\n// https://medium.com/@pradityadhitama/simple-search-bar-component-functionality-in-react-6589fda3385d\n\nconst SearchPage = (props) => {\n  const [input, setInput] = useState('');\n  const [artistsDefault, setArtistsDefault] = useState();\n  const [artists, setArtists] = useState();\n\n  // fetch band names from local file\n  const fetchData = async () => {\n    return await fetch(bands)\n    .then(r => r.text())\n    .then(text => {\n      const artists = text.split('\\n')\n      setArtists('');\n      setArtistsDefault(artists);\n    });\n  };\n\n  // POST function, update list of artists to display based on query\n  const handleSubmit = async e => {\n    e.preventDefault();\n    fetch('/api/query', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ query: input }),\n    }).then((response) => {\n      const rankedArtists = response.json().then(data => ({\n        data:data\n      })\n    ).then(res => {\n      console.log(res[0]);\n\n    })\n\n\n    });\n\n    const filteredArtists = searchArtists(input);\n    setArtists(filteredArtists);\n  };\n\n  // update content in search box.\n  const updateInput = async (input) => {\n    setInput(input);\n  }\n\n  // modified from 'findBestMatch' function from string-similarity npm library (see above)\n  function findBestMatches(mainString, targetStrings) {\n  \tconst ratings = [];\n  \tlet bestMatchIndex = 0;\n  \tfor (let i = 0; i < targetStrings.length; i++) {\n  \t\tconst currentTargetString = targetStrings[i];\n  \t\tvar currentRating = stringSimilarity.compareTwoStrings(mainString.toLowerCase(), currentTargetString.toLowerCase())\n\n      // Additional scoring for matching first characters of band name (more accurate results for short queries)\n      if(mainString.toLowerCase() === currentTargetString.toLowerCase().substring(0, mainString.length)){\n        currentRating += mainString.length / 5;\n      }\n  \t\tratings.push({target: currentTargetString, rating: currentRating})\n  \t\tif (currentRating > ratings[bestMatchIndex].rating) {\n  \t\t\tbestMatchIndex = i\n  \t\t}\n  \t}\n  \tconst bestMatch = ratings[bestMatchIndex]\n  \treturn { ratings: ratings, bestMatch: bestMatch, bestMatchIndex: bestMatchIndex };\n  }\n\n  // the main algorithm for searching, ranking relevant artist names.\\\n\n  function searchArtists(query){\n    var rankedArtists = [];\n    let artists = artistsDefault.map((x) => x);\n    var similarity;\n    for(var i = 0; i < 10; i++){\n      similarity = findBestMatches(query, artists)\n      rankedArtists[i] = similarity.bestMatch.target;\n      artists.splice(similarity.bestMatchIndex, 1)\n    }\n    return rankedArtists;\n  };\n\n  useEffect( () => {fetchData()},[]);\n\n  return (\n    <>\n      <a href=\"https://fan.booster.musicfox.io\">\n        <img src={ logo } alt=\"musicfox logo\"/>\n      </a>\n      <h1 style={{fontSize: 25, fontFamily: 'system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji'}}>Our Bands</h1>\n      <SearchBar\n       input={input}\n       onChange={updateInput}\n      />\n    <button\n      type=\"button\"\n      onClick={handleSubmit}\n      style={{height: 31, backgroundColor: 'black', borderColor: 'black', borderRadius: 4, outlineColor: '#D1D1D1', fontWeight: 'bold', fontFamily: 'system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji', color: 'white'}}\n      >\n        SEARCH\n      </button>\n      {artists !== ''? <Artists artists={artists}/> : null}\n    </>\n   );\n}\n\nexport default SearchPage\n"]},"metadata":{},"sourceType":"module"}